# AUTOGENERATED COPYRIGHT HEADER START
# Copyright (C) 2019-2024 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
# AUTOGENERATED COPYRIGHT HEADER END

name: Build

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

concurrency:
  group: build-${{ github.ref_name }}
  cancel-in-progress: true

env:
  CACHE_VERSION: "2024-01-25"

jobs:
  native:
    strategy:
      fail-fast: false
      matrix:
        runner: [ "windows-2022", "windows-2019", "macos-14", "ubuntu-24.04", "ubuntu-22.04", "ubuntu-20.04" ]
        include:
          - runner: "windows-2022"
            compiler: "MSVC"
            platform: "windows"
            name: "Windows 2022"
            CMAKE_GENERATOR: "Visual Studio 17 2022"
            CMAKE_GENERATOR_PLATFORM: "x64"
            
          - runner: "windows-2019"
            compiler: "MSVC"
            platform: "windows"
            name: "Windows 2019"
            CMAKE_GENERATOR: "Visual Studio 16 2019"
            CMAKE_GENERATOR_PLATFORM: "x64"

          - runner: "macos-14"
            compiler: "AppleClang"
            platform: "macos"
            name: "MacOS 14"
            CMAKE_GENERATOR: "Xcode"
            CMAKE_OSX_DEPLOYMENT_TARGET: "10.15"
            CMAKE_OSX_ARCHITECTURES: "x86_64;arm64"

          # Ubuntu 24.04 is GCC-14
          - runner: "ubuntu-24.04"
            compiler: "GCC-14"
            platform: "linux"
            name: "Ubuntu 24"
            CMAKE_GENERATOR: "Ninja Multi-Config"

          # Ubuntu 22.04 is GCC-12
          - runner: "ubuntu-22.04"
            compiler: "GCC-12"
            platform: "linux"
            name: "Ubuntu 22"
            CMAKE_GENERATOR: "Ninja Multi-Config"
            
          # Ubuntu 22.04 is GCC-10
          - runner: "ubuntu-20.04"
            compiler: "GCC-10"
            platform: "linux"
            name: "Ubuntu 20"
            CMAKE_GENERATOR: "Ninja Multi-Config"

    name: "${{ matrix.name}} (${{ matrix.compiler}})"
    runs-on: "${{ matrix.runner }}"
    env:
      CMAKE_BUILD_TYPE: "Release"
      CMAKE_GENERATOR: "${{ matrix.CMAKE_GENERATOR }}"
      CMAKE_GENERATOR_PLATFORM: "${{ matrix.CMAKE_GENERATOR_PLATFORM }}"
      CMAKE_SYSTEM_VERSION: "${{ matrix.CMAKE_SYSTEM_VERSION }}"
      CMAKE_OSX_DEPLOYMENT_TARGET: "${{ matrix.CMAKE_OSX_DEPLOYMENT_TARGET }}"
      CMAKE_OSX_ARCHITECTURES: "${{ matrix.CMAKE_OSX_ARCHITECTURES }}"
    outputs:
      version: ${{ steps.build.outputs.version }}
      tag: ${{ steps.build.outputs.tag }}
    steps:
    - name: "Clone"
      uses: "actions/checkout@v4"
      with:
        fetch-depth: 0
        fetch-tags: true
        submodules: "recursive"
    - name: "Clone Tags"
      shell: bash
      run: git fetch origin +refs/tags/*:refs/tags/*
    - name: "Prerequisites: Compiler (Linux)"
      if: ${{ matrix.platform == 'linux' }}
      shell: bash
      run: |
        # Install the appropriate compiler
        IFS=$'-' compiler=($(echo "${{ matrix.compiler }}")) # ToDo: Can this be done without invoking a sub-shell?
        echo "Installing '${compiler[0]}' version ${compiler[1]}..."
        if [[ "${compiler[0]}" == "GCC" ]]; then
          sudo apt-get install binutils gcc-${compiler[1]} g++-${compiler[1]}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${compiler[1]} 800 --slave /usr/bin/g++ g++ /usr/bin/g++-${compiler[1]}

          echo "CMAKE_C_COMPILER=gcc-${compiler[1]}" >> "$GITHUB_ENV"
          echo "CMAKE_CXX_COMPILER=g++-${compiler[1]}" >> "$GITHUB_ENV"
          #echo "CMAKE_LINKER=ld" >> "$GITHUB_ENV"
        elif [[ "${compiler[0]}" == "Clang" ]]; then
          curl -jLo /tmp/llvm.sh "https://apt.llvm.org/llvm.sh"
          chmod +x /tmp/llvm.sh
          sudo /tmp/llvm.sh ${compiler[1]} all
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/lld lld /usr/bin/lld-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/lldb lldb /usr/bin/lldb-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-${compiler[1]} 800
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-${compiler[1]} 800

          echo "CMAKE_C_COMPILER=clang-${compiler[1]}" >> "$GITHUB_ENV"
          echo "CMAKE_CXX_COMPILER=clang++-${compiler[1]}" >> "$GITHUB_ENV"
          echo "CMAKE_LINKER=ld.lld-${compiler[1]}" >> "$GITHUB_ENV"
        else
          echo "Unknown Compiler"
          exit 1
        fi
        sudo apt-get install ninja-build
    - name: "Prerequisites: Compiler (MacOS)"
      if: ${{ matrix.platform == 'macos' }}
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: '15.2'
    - name: "Prerequisites: Libraries (Linux)"
      if: ${{ matrix.platform == 'linux' }}
      shell: bash
      run: |
        sudo apt-get install libusb-dev
    - name: "Build"
      id: "build"
      shell: bash
      run: |
        cmake -S. -Bbuild -DCMAKE_INSTALL_PREFIX=build/distrib

        version="$(LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 cat "${{ github.workspace }}/build/version")"
        _r=$?; if [[ $_r != 0 ]]; then exit $_r; fi
        echo "version=${version}" >> "${GITHUB_OUTPUT}"
        echo "tag=$(git describe --tags --exact-match HEAD 2>/dev/null)" >> "${GITHUB_OUTPUT}"

        cmake --build build --config Release --target install
    - name: "Artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: "${{ matrix.name }}"
        path: "${{ github.workspace }}/build/distrib"
        if-no-files-found: error
        compression-level: 0
  release:
    if: github.event_name != 'pull_request'
    needs: [native]
    strategy:
      fail-fast: true
    runs-on: "ubuntu-latest"
    name: "Release"
    steps:
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      with:
        detached: true
    - name: "Clone"
      uses: "actions/checkout@v4"
    - name: "Gather Artifacts"
      uses: actions/download-artifact@v4
      with:
        path: "build/distrib"
    - name: "Create Release"
      shell: bash
      id: "release"
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if [[ "${{ needs.native.outputs.tag }}" != "" ]]; then
          tag="${{ needs.native.outputs.tag }}"
          title="Version ${{ needs.native.outputs.version }}"
          flag="--latest"
        else          
          tag="nightly"
          title="Nightly ${{ needs.native.outputs.version }}"
          flag="--prerelease"
        fi
        output=$(gh release delete "${tag}" --cleanup-tag --yes 2>&1) || [[ "${output}" == "release not found" ]]
        gh release create "${tag}" --generate-notes ${flag} -t "${title}"
        IFS=$'\n' els=($(find build/distrib -mindepth 1 -maxdepth 1 -type d))
        _edx=${#els[@]}
        for ((idx = 0; idx < ${_edx}; idx++ )); do
          _el=${els[${idx}]}
          name=$(basename "${_el}")
          pushd "${_el}" && 7z a "${{ github.workspace }}/${name}.zip" "*" && popd
          gh release upload "${tag}" "${{ github.workspace }}/${name}.zip#${name}"
        done

# ToDo:
# - Use https://github.com/vmactions/freebsd-vm for FreeBSD, OpenBSD, NetBSD and DragonFlyBSD builds?
